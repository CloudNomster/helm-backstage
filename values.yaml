backstage:
  commonLabels:
    app: backstage
  backstage:
    podLabels:
      app: backstage
    replicas: 1
    revisionHistoryLimit: 0

    image:
      registry: registry.maximillian.se
      repository: library/backstage
      tag: latest
      pullPolicy: Always

    containerPorts:
      backend: 7007

    command: ["node", "packages/backend"]

    installDir: /app

    extraEnvVarsSecrets:
      - backstage-secrets
    
    # Backstage doesn't provide any health endpoints by default. A simple one can be added like this: https://backstage.io/docs/plugins/observability/#health-checks
    readinessProbe: {}

    # Backstage doesn't provide any health endpoints by default. A simple one can be added like this: https://backstage.io/docs/plugins/observability/#health-checks
    livenessProbe: {}

    # Backstage doesn't provide any health endpoints by default. A simple one can be added like this: https://backstage.io/docs/plugins/observability/#health-checks
    startupProbe: {}

    appConfig:
      app:
        title: ${BACKSTAGE_TITLE}
        baseUrl: ${BACKSTAGE_BASE_URL}

      organization:
        name: ${BACKSTAGE_ORG}

      backend:
        baseUrl: ${BACKSTAGE_BASE_URL}
        listen:
          port: 7007
        csp:
          connect-src: ["'self'", 'http:', 'https:']
        cors:
          origin: ${BACKSTAGE_BASE_URL}
          methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
          credentials: true
        database:
          client: better-sqlite3
          connection: ':memory:'
        auth:
          dangerouslyDisableDefaultAuthPolicy: true # REMOVE THIS
        # See https://backstage.io/docs/auth/service-to-service-auth for
        #   keys:
        #     - secret: ${BACKEND_SECRET}

      integrations:
        github:
          - host: github.com
            token: ${GITHUB_TOKEN}

      proxy:
        endpoints:
          "/argocd/api":
            target: "${ARGOCD_URL}"
            changeOrigin: true
            headers:
              Cookie: "argocd.token=${ARGOCD_AUTH_TOKEN}"

      # Reference documentation http://backstage.io/docs/features/techdocs/configuration
      # Note: After experimenting with basic setup, use CI/CD to generate docs
      # and an external cloud storage when deploying TechDocs for production use-case.
      # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
      techdocs:
        builder: 'local' # Alternatives - 'external'
        generator:
          runIn: 'local' # Alternatives - 'local'
        publisher:
          type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

      auth:
        providers:
          microsoft:
            development:
              clientId: ${AZURE_CLIENT_ID}
              clientSecret: ${AZURE_CLIENT_SECRET}
              tenantId: ${AZURE_TENANT_ID}
              domainHint: ${AZURE_TENANT_ID}
              signIn:
                resolvers:
                  - resolver: emailMatchingUserEntityProfileEmail

      scaffolder:
        # see https://backstage.io/docs/features/software-templates/configuration for software template options

      catalog:
        locations: []
        import:
          entityFilename: catalog-info.yaml
        rules:
          - allow: [Component, System, API, Resource, Location]
        providers:
          microsoftGraphOrg:
            default: 
              tenantId: ${AZURE_TENANT_ID}
              clientId: ${AZURE_CLIENT_ID}
              clientSecret: ${AZURE_CLIENT_SECRET}
              user:
                filter: accountEnabled eq true and userType eq 'member'
              group:
                filter: >
                  securityEnabled eq true
                  and displayName eq 'team-nomster'
              schedule:
                frequency: PT1H
                timeout: PT50M
          github:
            providerId:
              organization: ${GITHUB_ORG}
              catalogPath: '/catalog-info.yaml'
              validateLocationsExist: True
              filters:
                branch: 'main'
                repository: '.*'
              schedule:
                frequency: { minutes: 30 }
                timeout: { minutes: 5 }
          kubernetes:
            nomstercluster:
              cluster: nomstercluster

      kubernetes:
        serviceLocatorMethod:
          type: 'multiTenant'
        clusterLocatorMethods:
          - type: 'config'
            clusters:
              - url: https://192.168.79.10:6443
                name: nomstercluster
                authProvider: 'serviceAccount'
                skipTLSVerify: true
                skipMetricsLookup: true
                dashboardUrl: ${K8S_DASHBOARD_URL}
                dashboardApp: standard
                caData: ${K8S_CONFIG_CA_DATA}
                customResources: 
                  - group: httproute.networking.k8s.io
                    apiVersion: v1
                    plural: httproutes

      permission:
        enabled: true







  # -- PostgreSQL [chart configuration](https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml)
  # @default -- See below
  postgresql:

    # -- Switch to enable or disable the PostgreSQL helm chart
    enabled: false

    # -- The authentication details of the Postgres database
    auth:

      # -- Name for a custom user to create
      username: bn_backstage

      # -- Password for the custom user to create
      password: ""

      # -- Name of existing secret to use for PostgreSQL credentials
      existingSecret: ""

      # -- The secret keys Postgres will look for to retrieve the relevant password
      secretKeys:

        # -- The key in which Postgres will look for, for the admin password, in the existing Secret
        adminPasswordKey: admin-password

        # -- The key in which Postgres will look for, for the user password, in the existing Secret
        userPasswordKey: user-password

        # -- The key in which Postgres will look for, for the replication password, in the existing Secret
        replicationPasswordKey: replication-password

    # -- PostgreSQL architecture (`standalone` or `replication`)
    architecture: standalone

  serviceAccount:
    create: false
    name: "backstage-read"
    automountServiceAccountToken: true
